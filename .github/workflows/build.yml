name: Build

on:
  workflow_dispatch:
    inputs:
      build-version:
        description: 'Node.js version to build'
        required: true
        default: '20'
        type: choice
        options:
        - 16
        - 18
        - 20
        - 22

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1 
  DOTNET_NOLOGO: 1

jobs:
  build:
    runs-on: ${{ matrix.os }}
    outputs:
      node-version: ${{ steps.node-test-version.outputs.node-version }}
    strategy:
      # fail-fast: false
      matrix:
        os: [windows-2022]
       
    name: build ${{ matrix.os }}-node-${{ inputs.build-version }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/setup-env
        with:
          node: ${{ inputs.build-version }}
          os: ${{ matrix.os }}

      - name: Get latest Node.js version
        id: node-test-version
        shell: bash
        run: |
          node tools/getVersionAction.js ${{ inputs.build-version }}
          echo "node-version=$(cat node.txt)" >> $GITHUB_OUTPUT
   
      # - name: Print latest Node.js version 
      #   run: |
      #     echo "node-version: ${{ steps.node-test-version.outputs.node-version }}"


      # - name: Resolve Electron version for test
      #   id: electron-test-version
      #   shell: bash
      #   run: |
      #      if [[ ${{ inputs.build-version }} == '29.0.0' ]]; then
      #        echo "test-version=29.4.6" >> $GITHUB_OUTPUT
      #      elif [[ ${{ inputs.build-version }} == '30.0.0' ]]; then
      #        echo "test-version=30.5.1" >> $GITHUB_OUTPUT
      #      elif [[ ${{ inputs.build-version }} == '31.0.0' ]]; then
      #        echo "test-version=31.6.0" >> $GITHUB_OUTPUT
      #      fi 

   
      - name: install node-gyp
        run: npm i -g node-gyp


      - name: Create release folder
        run: |
            mkdir "release\ia32\${{ inputs.build-version }}"
            mkdir "release\x64\${{ inputs.build-version }}"
            mkdir "release\arm64\${{ inputs.build-version }}"

      - name: Create node.version file
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            try {
              fs.writeFileSync('release\ia32\${{ inputs.build-version }}\node.version', ${{ steps.node-test-version.outputs.node-version }});
              fs.writeFileSync('release\x64\${{ inputs.build-version }}\node.version', ${{ steps.node-test-version.outputs.node-version }});
              if(${{ inputs.build-version }} >=20){
                fs.writeFileSync('release\arm64\${{ inputs.build-version }}\node.version', ${{ steps.node-test-version.outputs.node-version }});
              }
            } catch(err) {
              core.error("Error writing node.version file")
              core.setFailed(err)
            }

      - name: Build ia32
        timeout-minutes: 30
        run: |
            node-gyp configure build --target=${{ steps.node-test-version.outputs.node-version }} --runtime=node --release --arch=ia32
            cmd /c copy /y build\Release\edge_*.node release\ia32\${{ inputs.build-version }}
            cmd /c rmdir /S /Q build

      - name: Build x64
        timeout-minutes: 30
        run: |
            node-gyp configure build --target=${{ steps.node-test-version.outputs.node-version }} --runtime=node --release --arch=x64
            node-gyp configure build --target=20.17.0 --runtime=node --release --arch=x64
            cmd /c copy /y build\Release\edge_*.node release\x64\${{ inputs.build-version }}
            cmd /c rmdir /S /Q build

      - name: Build arm64
        timeout-minutes: 30
        if: ${{ inputs.build-version }} >=20
        shell: pwsh
        run: |
            node-gyp configure --target=${{ steps.node-test-version.outputs.node-version }} --runtime=node --release --arch=arm64

            (Get-Content -Raw build/build_managed.vcxproj) -replace '<FloatingPointModel>Strict</FloatingPointModel>', '<!-- <FloatingPointModel>Strict</FloatingPointModel> -->' | Out-File -Encoding Utf8 build/build_managed.vcxproj
            (Get-Content -Raw build/edge_coreclr.vcxproj) -replace '<FloatingPointModel>Strict</FloatingPointModel>', '<!-- <FloatingPointModel>Strict</FloatingPointModel> -->' | Out-File -Encoding Utf8 build/edge_coreclr.vcxproj
            (Get-Content -Raw build/edge_nativeclr.vcxproj) -replace '<FloatingPointModel>Strict</FloatingPointModel>', '<!-- <FloatingPointModel>Strict</FloatingPointModel> -->' | Out-File -Encoding Utf8 build/edge_nativeclr.vcxproj

            node-gyp build
            cmd /c copy /y build\Release\edge_*.node release\arm64\${{ inputs.build-version }}
            cmd /c rmdir /S /Q build


      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: edge-js-${{ inputs.build-version }}
          path: |
            release

  test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        # electron: [29.4.6, 30.5.1, 31.6.0]
        # electron: [29.4.6]
        os: [windows-2022]
      # fail-fast: false

    name: test ${{ matrix.os }}-node-${{ needs.build.outputs.node-version }}
    steps:

      - uses: agracio/github-substring-action@v1.0.0
        id: node_version
        with:
            value: ${{ needs.build.outputs.node-version }}
            length_from_start: 2

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          pattern: edge-js-${{ steps.node_version.outputs.substring }}*

      - run: ls -R release

      # - name: Checkout code
      #   uses: actions/checkout@v4

      # - name: Setup env
      #   uses: ./.github/actions/setup-env
      #   with:
      #     node: ${{ needs.build.outputs.node-version }}
      #     os: ${{ matrix.os }}



      # - name: Create release folder
      #   run: |
      #     cmd /c if not exist "lib\native\win32\ia32\${{ steps.electron_version.outputs.substring }}.0.0" mkdir "lib\native\win32\ia32\${{ steps.electron_version.outputs.substring }}.0.0"
      #     cmd /c if not exist "lib\native\win32\x64\${{ steps.electron_version.outputs.substring }}.0.0" mkdir "lib\native\win32\x64\${{ steps.electron_version.outputs.substring }}.0.0"
      #     cmd /c if not exist "lib\native\win32\arm64\${{ steps.electron_version.outputs.substring }}.0.0" mkdir "lib\native\win32\arm64\${{ steps.electron_version.outputs.substring }}.0.0"


      # - name: Copy artifacts
      #   run: |
      #     cmd /c copy /y release\${{ steps.electron_version.outputs.substring }}.0.0\x64\${{ steps.electron_version.outputs.substring }}.0.0\edge_*.node lib\native\win32\x64\${{ steps.electron_version.outputs.substring }}.0.0

      # - name: Test
      #   timeout-minutes: 10
      #   uses: ./.github/actions/test-windows
      #   with:
      #     electron: ${{ needs.build.outputs.test-version }}
    
      # - name: Test report
      #   uses: ./.github/actions/create-test-report
      #   with:
      #     electron: ${{ needs.build.outputs.test-version }}
      #     os: ${{ matrix.os }}
      #     name: 'build-tests'
  
    